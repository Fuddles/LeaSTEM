#!/usr/bin/env node

/**
 *  From now on, does not allow the Node.js server to crash from an uncaught exception
 *
 *  uncaughtException should be used to perform synchronous cleanup before shutting down the process.
 *  It is not safe to resume normal operation after uncaughtException.
 *  If you do use it, restart your application after every unhandled exception!
 *  You have been warned.
 */
process.on('uncaughtException', function(err) {
   console.error('\n\nFATAL ERROR !!!! -- Caught exception: ' + err);
   try {
       //console.trace( "\nMore info (console.trace):" );
       console.error( "\n\nError Stack-trace:");
       console.error( err.stack );
   }
   catch (exc) {}
});


// ███    ███ ██    ██ ██   ████████ ██    ████████ ██   ██ ██████  ███████  █████  ██████
// ████  ████ ██    ██ ██      ██    ██       ██    ██   ██ ██   ██ ██      ██   ██ ██   ██
// ██ ████ ██ ██    ██ ██      ██    ██ █████ ██    ███████ ██████  █████   ███████ ██   ██
// ██  ██  ██ ██    ██ ██      ██    ██       ██    ██   ██ ██   ██ ██      ██   ██ ██   ██
// ██      ██  ██████  ███████ ██    ██       ██    ██   ██ ██   ██ ███████ ██   ██ ██████

const cluster = require('cluster');

// ----- Main process is LED-lighting, child process is web server, and we spawn also the sensor reading
if (cluster.isMaster) {

    const setCurrentPhotoPromise = require("../process/image-functions").setCurrentPhotoPromise;
    const initLoop               = require("../process/do-loop").initLoop;

    // 0. --- Global inits
    global.bnoValues = [ process.hrtime(), 0,0,0, 0,0,0 ];

    // 1. --- Launch the angle reader (BNO055 sensor)
    const childProcSpawn = require('child_process').spawn;          // always use spawn rather than exec or execFile!
    const bno055Command  = "/usr/bin/python";
    const bno055Args     = [ "./bin/python/read-bno055.py" ];

    // H=330.5 R=-22.5 P=173.8 gX=-0.00 gY=-0.00 gZ=-0.00  (CR-LF)
    //  Number of decimals must be exact!
    //const bnoRegex = /H=(\-?\d+\.\d) R=(\-?\d+\.\d) P=(\-?\d+\.\d) gX=(\-?\d+\.\d\d) gY=(\-?\d+\.\d\d) gZ=(\-?\d+\.\d\d) mX=(\-?\d+\.\d\d) mY=(\-?\d+\.\d\d) mZ=(\-?\d+\.\d\d)/ ;
    const bnoRegex = /H=(\-?\d+\.\d) R=(\-?\d+\.\d) P=(\-?\d+\.\d) gX=(\-?\d+\.\d\d) gY=(\-?\d+\.\d\d) gZ=(\-?\d+\.\d\d) mX=(\-?\d+\.\d\d) mY=(\-?\d+\.\d\d) mZ=(\-?\d+\.\d\d) qa=(\-?\d+\.\d+) qb=(\-?\d+\.\d+) qc=(\-?\d+\.\d+) qd=(\-?\d+\.\d+)/ ;

    console.error("Launching BNO055 reading with:  " + bno055Command +" "+ bno055Args);
    let angleSensorSpawn = childProcSpawn( bno055Command, bno055Args );      // ,{} for options
    angleSensorSpawn.on('error', (err) => {
        console.error( "ERROR in angleSensorSpawn: process FAILED with error:" );
        console.error( err );
        throw new Error(err);
    });
    angleSensorSpawn.on('exit', (code,signal) => {
        console.log( "EXIT of angleSensorSpawn: process completed with code="+ code +" and signal=" + signal );
        // Pb with the sensor: Restart node!
        if (code) {
            console.error( "RESTART NODE" );
            let child = childProcSpawn( "/etc/init.d/lea-stem", ['restart'], { detached: true, stdio: 'ignore' } );
            child.unref();
        }
    });
    angleSensorSpawn.stderr.on( 'data', (data) => {
        console.error("ERROR from angleSensorSpawn.stderr:");
        console.error( data.toString() );
    });
    // --- Extract angle and speed info from BNO055 output
    angleSensorSpawn.stdout.on( 'data', (data) => {
        // To get current time in nanoseconds  https://nodejs.org/dist/latest-v6.x/docs/api/process.html#process_process_hrtime_time
        let hrTime = process.hrtime();

        // angleSensorSpawn: H=330.5 R=-22.5 P=173.8 gX=-0.00 gY=-0.00 gZ=-0.00 mX=-0.00 mY=-0.00 mZ=-0.00 (CR-LF)
        let values = data.toString().match( bnoRegex );     // values[1] .. values[9] with values[0] being the string itself
        // console.log("angleSensorSpawn: \t " + data);
        // console.log( values );
        // let cosFromQuaternion = Number.parseFloat(values[10]) / 0.70710678118;
        // cosFromQuaternion = Math.min( Math.max( cosFromQuaternion, -1.0 ), 1.0 );
        // let angFromQuaternion = Math.acos( cosFromQuaternion ) * 360 / Math.PI;  // 2 * 180, as cos( ang/2 ) = qa
        // console.log("Quaternion: \t qa= "+ values[10]+" \t qb= "+ values[11]+" \t qc= "+ values[12]+" \t qd= "+ values[13]);
        // console.log("Angle from quaternion = " + angFromQuaternion );
        // console.log( data.toString() );

        // Replace values[0] and store globally
        values[0]        = hrTime;                          // we replace value[0] with hrtime. values[1] .. values[9] as before
        global.bnoValues = values;                          // Strings !!
        //console.log( values );
        return;
    });


    // 2. --- Connect the processes: current image + angle
    //        Note: to send a message from the child to the master, do:
    //                  process.send( { ... } );
    //              to send a message from the master to the child, do:
    //                  global.leaHttpWorker.send( { ... } );
    //        Messages from child (http-server) to master (led-lighting)
    cluster.on('message', (worker, msg) => {

        if ( ! msg || ! msg.action ) {
            console.error("ERROR in cluster on message: EMPTY msg");
            console.error( msg );
            return;
        }

        // process.send( { action: "currentPhoto", filename: resizedPhotoFilename } );
        if ( msg.action == "currentPhoto" ) {
            setCurrentPhotoPromise( msg.filename );
            return;
        }
    });


    // 3. --- Launch the web server
    cluster.fork();
    // If the worker ever dies while the master is still alive, log error!
    cluster.on('exit', (worker, code, signal) => {
        console.error('\nERROR! Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
    });


    // 4. --- Start displaying LEDs
    //        We only start when Master receives a signal when the webser worker is online
    cluster.on('online', function(worker) {
        console.log('Worker ' + worker.process.pid + ' is online');
        global.leaHttpWorker = worker;              // Also equals to cluster.workers[0]

        initLoop();
    });

}
else {

    // Messages from master (led-lighting) to child (http-server)
    process.on('message', msg => {

        if ( !msg || !msg.action ) {
            console.error("ERROR in webserver process on message: EMPTY msg");
            return;
        }

        // process.send( { action: "currentPhoto", filename: resizedPhotoFilename } );
        if ( msg.action == "currentPhoto" ) {
            console.log("global.currentImageFileName on webserver thread set to " + msg.filename);
            global.currentImageFileName = msg.filename;
            return;
        }
    });


    // ██     ██ ███████ ██████      ███████ ███████ ██████  ██    ██ ███████ ██████
    // ██     ██ ██      ██   ██     ██      ██      ██   ██ ██    ██ ██      ██   ██
    // ██  █  ██ █████   ██████      ███████ █████   ██████  ██    ██ █████   ██████
    // ██ ███ ██ ██      ██   ██          ██ ██      ██   ██  ██  ██  ██      ██   ██
    //  ███ ███  ███████ ██████      ███████ ███████ ██   ██   ████   ███████ ██   ██

    var http = require('http');
    var app  = require('../app');

    /**
    * Get port from environment and store in Express.
    */
    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
    * Create HTTP server.
    */
    var server = http.createServer(app);

    /**
    * Listen on provided port, on all network interfaces.
    */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

}





// +++++++++++++++++++++++++++ HELPERS +++++++++++++++++++++++++++++++++++++++++

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
